name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

env:
  DOTNET_VERSION: '8.0.x'
  REGISTRY: ghcr.io

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        echo "## Release ${{ github.ref_name }}" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Changes" >> CHANGELOG.md
        git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"- %s" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Contributors" >> CHANGELOG.md
        git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"- %an" | sort -u >> CHANGELOG.md

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: MCPVault ${{ github.ref_name }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') }}

  build-and-publish:
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        runtime: [linux-x64, win-x64, osx-x64, osx-arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Publish application
      run: |
        dotnet publish src/MCPVault.API/MCPVault.API.csproj \
          -c Release \
          -r ${{ matrix.runtime }} \
          --self-contained true \
          -p:PublishSingleFile=true \
          -p:PublishTrimmed=true \
          -o ./publish/${{ matrix.runtime }}

    - name: Create archive
      run: |
        cd ./publish/${{ matrix.runtime }}
        if [[ "${{ matrix.runtime }}" == win-* ]]; then
          zip -r ../../mcpvault-${{ github.ref_name }}-${{ matrix.runtime }}.zip .
        else
          tar -czf ../../mcpvault-${{ github.ref_name }}-${{ matrix.runtime }}.tar.gz .
        fi
        cd ../..

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./mcpvault-${{ github.ref_name }}-${{ matrix.runtime }}.${{ contains(matrix.runtime, 'win') && 'zip' || 'tar.gz' }}
        asset_name: mcpvault-${{ github.ref_name }}-${{ matrix.runtime }}.${{ contains(matrix.runtime, 'win') && 'zip' || 'tar.gz' }}
        asset_content_type: ${{ contains(matrix.runtime, 'win') && 'application/zip' || 'application/gzip' }}

  docker-release:
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max